{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","count","setCount","axios","get","then","data","filter","x","_id","refreshCount","setTimeout","Card","style","width","height","Content","Header","display","justifyContent","fontSize","extra","className","Button","Group","key","negative","onClick","post","kind","value","Icon","name","Or","positive","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NA8EeA,MA1Ef,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,KA2Cb,OAPAC,IAAMC,IAAI,0BAA0BC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAC1CJ,EACEI,EAAKC,QAAO,SAAAC,GAAC,MAAc,OAAVA,EAAEC,OAAc,GAAGR,MAClCK,EAAKC,QAAO,SAAAC,GAAC,MAAc,QAAVA,EAAEC,OAAe,GAAGR,OArCtB,SAAfS,IACJC,YAAW,WACTR,IAAMC,IAAI,0BAA0BC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAC1CJ,EACEI,EAAKC,QAAO,SAAAC,GAAC,MAAc,OAAVA,EAAEC,OAAc,GAAGR,MAClCK,EAAKC,QAAO,SAAAC,GAAC,MAAc,QAAVA,EAAEC,OAAe,GAAGR,OAEzCS,SAED,KA8BHA,MAGA,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACpC,kBAACH,EAAA,EAAKI,QAAN,CAAcH,MAAO,CAAEC,MAAO,SAC5B,kBAACF,EAAA,EAAKK,OAAN,CACEJ,MAAO,CACLK,QAAS,OACTJ,MAAO,OACPK,eAAgB,SAChBC,SAAU,aAGXnB,IAGL,kBAACW,EAAA,EAAKI,QAAN,CAAcK,OAAK,GACjB,yBAAKC,UAAU,kBACb,kBAACC,EAAA,EAAOC,MAAR,CAAcX,MAAO,CAAEC,MAAO,SAC5B,kBAACS,EAAA,EAAD,CAAQE,IAAI,QAAQC,UAAQ,EAACC,QAnCf,WACtBzB,EAASD,EAAQ,GACjBE,IACGyB,KAAK,yBAA0B,CAAEC,KAAM,MAAOC,MAAO,IACrDzB,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPJ,EACEI,EAAKC,QAAO,SAAAC,GAAC,MAAc,OAAVA,EAAEC,OAAc,GAAGR,MAClCK,EAAKC,QAAO,SAAAC,GAAC,MAAc,QAAVA,EAAEC,OAAe,GAAGR,YA6BnC,kBAAC8B,EAAA,EAAD,CAAMC,KAAK,kBAEb,kBAACT,EAAA,EAAOU,GAAR,MACA,kBAACV,EAAA,EAAD,CAAQE,IAAI,OAAOS,UAAQ,EAACP,QAnDd,WACtBzB,EAASD,EAAQ,GACjBE,IACGyB,KAAK,yBAA0B,CAAEC,KAAM,KAAMC,MAAO,IACpDzB,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OACJJ,EACEI,EAAKC,QAAO,SAAAC,GAAC,MAAc,OAAVA,EAAEC,OAAc,GAAGR,MAClCK,EAAKC,QAAO,SAAAC,GAAC,MAAc,QAAVA,EAAEC,OAAe,GAAGR,YA6CnC,kBAAC8B,EAAA,EAAD,CAAMC,KAAK,sBCzDLG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e7ddaf70.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Card, Icon } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const refreshCount = () => {\n    setTimeout(() => {\n      axios.get(\"http://localhost:3000/\").then(({ data }) => {\n        setCount(\n          data.filter(x => x._id === \"in\")[0].count -\n            data.filter(x => x._id === \"out\")[0].count\n        );\n        refreshCount();\n      });\n    }, 5000);\n  };\n  const handleIncrement = () => {\n    setCount(count + 1);\n    axios\n      .post(\"http://localhost:3000/\", { kind: \"in\", value: 1 })\n      .then(({ data }) =>\n        setCount(\n          data.filter(x => x._id === \"in\")[0].count -\n            data.filter(x => x._id === \"out\")[0].count\n        )\n      );\n  };\n\n  const handleDecrement = () => {\n    setCount(count - 1);\n    axios\n      .post(\"http://localhost:3000/\", { kind: \"out\", value: 1 })\n      .then(({ data }) => {\n        setCount(\n          data.filter(x => x._id === \"in\")[0].count -\n            data.filter(x => x._id === \"out\")[0].count\n        );\n      });\n  };\n  axios.get(\"http://localhost:3000/\").then(({ data }) => {\n    setCount(\n      data.filter(x => x._id === \"in\")[0].count -\n        data.filter(x => x._id === \"out\")[0].count\n    );\n    refreshCount();\n  });\n  return (\n    <Card style={{ width: \"100%\", height: \"100%\" }}>\n      <Card.Content style={{ width: \"100%\" }}>\n        <Card.Header\n          style={{\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"center\",\n            fontSize: \"xx-large\"\n          }}\n        >\n          {count}\n        </Card.Header>\n      </Card.Content>\n      <Card.Content extra>\n        <div className=\"ui two buttons\">\n          <Button.Group style={{ width: \"100%\" }}>\n            <Button key=\"minus\" negative onClick={handleDecrement}>\n              <Icon name=\"minus circle\" />\n            </Button>\n            <Button.Or />\n            <Button key=\"plus\" positive onClick={handleIncrement}>\n              <Icon name=\"plus circle\" />\n            </Button>\n          </Button.Group>\n        </div>\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}